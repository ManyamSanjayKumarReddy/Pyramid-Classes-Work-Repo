Stack -- LIFO
-- Last item to be inserted into a stack is the first one to be deleted from it
-- Both insertion and removal are allowed at one end.
-- Push()
-- pop()
-- peek() --- Top of the stack
-- Overflow state -- when it is completely full
-- Underflow state -- it it is completely empty

Top Value

** -1 Means --> Stack is empty
** 0 Means --> Only One Element
** N-1 --> Stack is Full
** N --> Stack is Overflow

Hierarchy of the Stack Class :
        Stack --> Vector --> List --> Collection --> Iterable

Stack Constructor --> public stack()
** Default Constructor that creates an empty stack

Creating a stack --> Stack stk = new Stack(); or Stack<type> stk = new Stack<>();

** Methods of Class Stack

1. Empty() --> checks it is empty or not  [boolean]
2. Push(E item) --> Pushes an element into the stack  [Element]
3. pop() --> removes the top of the element  [Element]
4. peek() --> displaying the top element without removing it  [Element]
5. search(Object 0) --> The Method searches object and returns the position of the object  [int]
                        Top most element is considered as 1st Position and reads from top tp bottom
6. Size of the Stack can be Found using --> stack.size()

** Iterate Elements

--> Fetching the elements of the stack. We have 3 different Methods
        1. iterator()
        2. forEach()
        3. listIterator()


** Queue :

1. Element is inserted from REAR and Deleted from FRONT.
2. Front Points to the Beginning and Rear Points to the end.
3. Queue follows the FIFO (First in First Out)

** One end is used to insert data -- Enqueue
** Other end is used to delete data -- Dequeue (Because queue is open at both it's ends)

** Back < Front Means --> Empty Queue

--> Types of Queues :
    1. Simple Queue
    2. Circular Queue
    3. Priority Queue
    4. Double Ended Queue

------ Circular Queue :
            --> Each Node is connected to the next node in the sequence
            --> But the last node's pointer is also connected to the first node's address
            --> Hence, the last node and the first node also gets connected making a circular link overall.

------ Priority Queue :
            --> It Makes data retrieval possible only through a pre-determined priority number assigned to the data items.
            --> While the deletion is performed in accordance to priority number (the data item with highest priority is removed first)
                , insertion is performed only in the order.
------ Double Ended Queue - Dequeue
            --> It allows the insert and delete operations from both the ends ( Front and rear) of the queue.
            --> Queues are an important concept of the datastructures and understanding the types are more most important

Methods :

1. add(E e)
2. peek()
3. element() --- same as Peek but without throwing any Exception
4. remove()
5. poll() -- Removes the head and returns null if it was empty
6. offer() -- insert a new element without violating capacity restrictions
7. size
